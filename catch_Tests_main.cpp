#define CATCH_CONFIG_MAIN
#define CATCH_CONFIG_FAST_COMPILE // for fast compilation
#include "catch/include/catch.h"

#include "my_lib/src/dino_circle_dosts.cpp"

#include <iostream>
#include <vector>
#include <math.h>
#include <time.h>
#include <random>
#include <tuple>
#include <fstream>
#include <chrono>

using namespace std;


TEST_CASE("test if the getting_funktctions calculate the right elements", "get_stat") {

    vector<float> x = {55.3846, 51.5385, 46.1538, 42.8205, 40.7692, 38.7179, 35.641, 33.0769, 28.9744, 26.1538, 23.0769, 22.3077, 22.3077, 23.3333, 25.8974, 29.4872, 32.8205, 35.3846, 40.2564, 44.1026, 46.6667, 50, 53.0769, 56.6667, 59.2308, 61.2821, 61.5385, 61.7949, 57.4359, 54.8718, 52.5641, 48.2051, 49.4872, 51.0256, 45.3846, 42.8205, 38.7179, 35.1282, 32.5641, 30, 33.5897, 36.6667, 38.2051, 29.7436, 29.7436, 30, 32.0513, 35.8974, 41.0256, 44.1026, 47.1795, 49.4872, 51.5385, 53.5897, 55.1282, 56.6667, 59.2308, 62.3077, 64.8718, 67.9487, 70.5128, 71.5385, 71.5385, 69.4872, 46.9231, 48.2051, 50, 53.0769, 55.3846, 56.6667, 56.1538, 53.8462, 51.2821, 50, 47.9487, 29.7436, 29.7436, 31.2821, 57.9487, 61.7949, 64.8718, 68.4615, 70.7692, 72.0513, 73.8462, 75.1282, 76.6667, 77.6923, 79.7436, 81.7949, 83.3333, 85.1282, 86.4103, 87.9487, 89.4872, 93.3333, 95.3846, 98.2051, 56.6667, 59.2308, 60.7692, 63.0769, 64.1026, 64.359, 74.359, 71.2821, 67.9487, 65.8974, 63.0769, 61.2821, 58.7179, 55.1282, 52.3077, 49.7436, 47.4359, 44.8718, 48.7179, 51.2821, 54.1026, 56.1538, 52.0513, 48.7179, 47.1795, 46.1538, 50.5128, 53.8462, 57.4359, 60, 64.1026, 66.9231, 71.2821, 74.359, 78.2051, 67.9487, 68.4615, 68.2051, 37.6923, 39.4872, 91.2821, 50, 47.9487, 44.1026};
    vector<float> y = {97.1795, 96.0256, 94.4872, 91.4103, 88.3333, 84.8718, 79.8718, 77.5641, 74.4872, 71.4103, 66.4103, 61.7949, 57.1795, 52.9487, 51.0256, 51.0256, 51.0256, 51.4103, 51.4103, 52.9487, 54.1026, 55.2564, 55.641, 56.0256, 57.9487, 62.1795, 66.4103, 69.1026, 55.2564, 49.8718, 46.0256, 38.3333, 42.1795, 44.1026, 36.4103, 32.5641, 31.4103, 30.2564, 32.1795, 36.7949, 41.4103, 45.641, 49.1026, 36.0256, 32.1795, 29.1026, 26.7949, 25.2564, 25.2564, 25.641, 28.718, 31.4103, 34.8718, 37.5641, 40.641, 42.1795, 44.4872, 46.0256, 46.7949, 47.9487, 53.718, 60.641, 64.4872, 69.4872, 79.8718, 84.1026, 85.2564, 85.2564, 86.0256, 86.0256, 82.9487, 80.641, 78.718, 78.718, 77.5641, 59.8718, 62.1795, 62.5641, 99.4872, 99.1026, 97.5641, 94.1026, 91.0256, 86.4103, 83.3333, 79.1026, 75.2564, 71.4103, 66.7949, 60.2564, 55.2564, 51.4103, 47.5641, 46.0256, 42.5641, 39.8718, 36.7949, 33.718, 40.641, 38.3333, 33.718, 29.1026, 25.2564, 24.1026, 22.9487, 22.9487, 22.1795, 20.2564, 19.1026, 19.1026, 18.3333, 18.3333, 18.3333, 17.5641, 16.0256, 13.718, 14.8718, 14.8718, 14.8718, 14.1026, 12.5641, 11.0256, 9.8718, 6.0256, 9.4872, 10.2564, 10.2564, 10.641, 10.641, 10.641, 10.641, 10.641, 10.641, 8.718, 5.2564, 2.9487, 25.7692, 25.3846, 41.5385, 95.7692, 95, 92.6923};
    int length = x.size();

    vector<float>  test_get_stat =  get_stat_values(x, y, length);
    vector<float> set_get_stat_values = { 54.26328f, 47.83225f, 16.70601f, 26.84039f, -0.06447f };

    if(set_get_stat_values.size() == test_get_stat.size()){
        for(int i=0;i<test_get_stat.size();i++){
            REQUIRE((int)(test_get_stat[i]*10000) == (int)(set_get_stat_values[i]*10000));
        }
    }else{
        REQUIRE(test_get_stat.size() == set_get_stat_values.size());
    }





    int element = rand_num(re);
    float x_el = x[element];
    float y_el = y[element];

    vector<float> xs = {25,50,75};
    vector<float> ys = {20,50,80};

    vector<vector<float>> mat_xx  = itertools_product(xs,ys);

    vector<float>  test_get_vec_dis =  get_vec_dis(x_el, y_el, mat_xx);
    vector<float> set_get_vec_dis = { 82.94516f, 56.1171f, 34.905f, 77.3671f, 47.48577f, 18.00358f, 79.63315f,
                                      51.09471f, 26.07487f }
    ;



    if(set_get_vec_dis.size() == test_get_vec_dis.size()){
        for(int i=0;i<set_get_vec_dis.size();i++){
            REQUIRE((int)(set_get_vec_dis[i]*10000) == (int)(test_get_vec_dis[i]*10000));
        }
    }else{
        REQUIRE(set_get_vec_dis.size() == test_get_vec_dis.size());
    }
















    int iters = 200000;

    auto [x1,y1] = run_patern(x,y,length,iters);


    vector<float>  test_run_patern_x =  x1;
    vector<float>  test_run_patern_y =  y1;

    vector<float> set_test_run_patern_x = { 53.04953f, 51.89622f, 47.75411f, 49.65563f, 46.29004f, 39.04275f, 39.15134f, 35.7082f, 32.16635f, 27.46692f, 24.20531f, 23.21247f, 23.24145f, 16.36905f, 19.45914f, 38.58128f, 37.49649f, 35.32742f, 37.42336f, 38.58103f, 42.10799f, 46.52161f, 50.11612f, 54.32027f, 60.10299f, 60.90679f, 56.55423f, 55.94788f, 58.37963f, 51.62777f, 39.17181f, 40.60053f, 38.7055f, 39.32156f, 44.03217f, 46.38732f, 37.33041f, 47.19954f, 38.54693f, 37.50934f, 37.8482f, 35.79121f, 35.20859f, 39.1231f, 25.11238f, 23.33883f, 31.67104f, 27.53062f, 42.62843f, 44.23286f, 49.70562f, 46.56815f, 51.86001f, 51.84106f, 60.07833f, 61.37642f, 70.75316f, 71.47858f, 73.39283f, 73.26993f, 71.12479f, 66.65114f, 66.46055f, 65.29812f, 47.52824f, 48.47824f, 54.32449f, 52.41407f, 57.8152f, 59.04701f, 50.71007f, 54.47923f, 46.39188f, 52.96096f, 47.98228f, 39.28773f, 26.09404f, 38.57418f, 54.69125f, 58.27766f, 62.95441f, 60.13889f, 66.93548f, 68.23206f, 71.66351f, 76.02438f, 72.79563f, 75.71442f, 82.01543f, 84.28237f, 90.71526f, 90.14555f, 90.67948f, 90.21648f, 89.18339f, 91.47014f, 92.02946f, 89.70171f, 57.49229f, 64.21468f, 63.27833f, 64.09908f, 61.47776f, 58.37548f, 79.03889f, 72.65868f, 74.20309f, 69.10511f, 64.00875f, 63.47525f, 59.48833f, 55.21492f, 50.09064f, 49.63398f, 47.89557f, 40.92139f, 56.18845f, 52.17466f, 58.00558f, 50.82296f, 55.60826f, 48.4353f, 44.2538f, 51.42299f, 46.15182f, 55.74279f, 62.60611f, 56.38554f, 69.38238f, 66.55631f, 62.80521f, 68.15827f, 75.09976f, 62.03516f, 64.0088f, 66.09994f, 33.18872f, 46.20641f, 89.75526f,
            54.72433f, 47.21302f, 50.48645f };


    vector<float> set_test_run_patern_y = { 84.9342f, 85.73223f, 84.65191f, 85.94066f, 85.83738f, 83.07584f, 83.46695f,
                                            80.40697f, 78.08119f, 74.77071f, 69.06133f, 70.02854f, 64.26133f, 51.25204f,
                                            52.2042f, 52.84445f, 54.93063f, 52.13601f, 58.39227f, 57.40583f, 60.71773f,
                                            65.50397f, 67.03889f, 65.43317f, 64.99958f, 66.45762f, 66.82919f, 63.81281f,
                                            67.03765f, 66.71067f, 36.35008f, 38.08332f, 42.94973f, 36.9363f, 34.28289f,
                                            32.17894f, 39.65567f, 32.9379f, 39.10025f, 37.99049f, 46.14717f, 51.12339f,
                                            53.59853f, 40.70189f, 26.62309f, 25.02561f, 18.10395f, 20.5967f, 32.82384f,
                                            32.32908f, 28.96071f, 32.66174f, 29.21561f, 28.46883f, 29.25582f, 29.66773f,
                                            37.16794f, 45.00437f, 49.11641f, 49.86249f, 57.51149f, 58.90643f, 62.42614f,
                                            60.73956f, 84.87313f, 85.65977f, 85.99198f, 86.1765f, 85.84238f, 86.01565f,
                                            86.29671f, 83.99231f, 84.2916f, 85.68069f, 86.06625f, 57.68199f, 71.80107f,
                                            60.07554f, 86.59084f, 86.05341f, 84.64547f, 86.19069f, 84.59932f, 83.6841f,
                                            81.20953f, 79.54648f, 81.93628f, 79.78004f, 71.66563f, 66.34465f, 59.49055f,
                                            51.4663f, 49.44659f, 48.31647f, 43.66343f, 40.76243f, 43.54623f, 38.77108f,
                                            28.93913f, 33.05938f, 32.11337f, 34.39316f, 29.6001f, 29.35485f, 20.35979f,
                                            16.97711f, 16.65155f, 13.15545f, 14.03897f, 10.88772f, 11.98154f, 11.16069f,
                                            9.43753f, 12.72046f, 12.24941f, 12.15377f, 9.05937f, 10.25857f, 10.60439f,
                                            10.81199f, 9.78249f, 12.9572f, 11.44632f, 12.39438f, 11.45361f, 10.93434f,
                                            12.9143f, 9.07522f, 12.68649f, 14.35052f, 10.74209f, 11.78217f, 15.26463f,
                                            11.32574f, 11.63997f, 11.657f, 17.01746f, 32.69982f, 46.73162f, 86.59322f,
                                            85.58399f, 85.27018f };



    if(test_run_patern_x.size() == set_test_run_patern_x.size() && test_run_patern_y.size() == set_test_run_patern_y.size()){
        for(int i=0;i<test_run_patern_x.size();i++){
            REQUIRE((int)(test_run_patern_x[i]*1000) == (int)(set_test_run_patern_x[i]*1000));
            REQUIRE((int)(test_run_patern_y[i]*1000) == (int)(set_test_run_patern_y[i]*1000));
        }

        for(int i=0;i<test_run_patern_y.size();i++){

            REQUIRE((int)(test_run_patern_y[i]*1000) == (int)(set_test_run_patern_y[i]*1000));
        }


    }else{
        REQUIRE(test_run_patern_x.size() == set_test_run_patern_x.size());
        REQUIRE(test_run_patern_y.size() == set_test_run_patern_y.size());
    }





    float t;
    int iter = 10000000;
    float max_temp = 0.4;
    t = (max_temp) * curve(((float)iter-1));

    auto [xx1,yy1] = perturb(x,y,t,length);


    vector<float>  test_patern_x =  xx1;
    vector<float>  test_patern_y =  yy1;

    vector<float> set_test_patern_x = { 55.3846f, 51.5385f, 46.1538f, 42.8205f, 40.7692f, 38.7179f, 35.641f, 33.0769f, 28.9744f, 26.1538f, 23.0769f, 22.3077f, 22.3077f, 23.3333f, 25.8974f,
            29.4872f, 32.8205f, 35.3846f, 40.2564f, 44.1026f, 46.6667f, 50.0f, 53.0769f,
            56.6667f, 59.2308f, 61.2821f, 61.5385f, 61.7949f, 57.4359f, 54.8718f, 52.5641f, 48.2051f, 49.4872f, 51.0256f, 45.3846f, 42.8205f, 38.7179f, 35.1282f,
            32.5641f, 30.0f, 33.5897f, 36.6667f, 38.2051f, 29.7436f, 29.7436f, 30.0f, 32.0513f, 35.8974f, 41.0256f, 44.1026f, 47.1795f, 49.4872f, 51.5385f, 53.5897f,
            55.1282f, 56.6667f, 59.2308f, 62.3077f, 64.8718f, 67.9487f, 70.5128f, 71.5385f, 71.5385f, 69.4872f, 46.9231f, 48.2051f, 50.0f, 53.0769f, 55.3846f, 56.6667f, 56.1538f, 53.8462f, 51.2821f, 50.0f, 47.9487f, 29.7436f, 29.7436f, 31.2821f, 57.9487f, 61.7949f, 64.8718f, 68.4615f, 70.7692f, 72.0513f, 73.8462f,
            75.1282f, 76.6667f, 77.6923f, 79.7436f, 81.7949f, 83.3333f, 85.1282f, 86.4103f, 87.9487f, 89.4872f, 93.3333f, 95.3846f, 98.2051f, 56.6667f, 59.2308f,
            60.7692f, 63.0769f, 64.1026f, 64.359f, 74.359f, 71.2821f, 67.9487f, 65.8974f,
            63.0769f, 61.2821f, 58.7179f, 55.1282f, 52.3077f, 49.7436f, 47.4359f, 44.8718f, 48.7179f, 51.2821f, 54.1026f, 56.1538f, 52.0513f, 48.7179f, 47.1795f,
            46.1538f, 50.5128f, 53.8462f, 57.4359f, 60.0f, 64.1026f, 66.9231f, 71.2821f,
            74.359f, 78.2051f, 67.9487f, 68.38706f, 68.2051f, 37.6923f, 39.4872f, 91.2821f, 50.0f, 47.9487f, 44.1026f };


    vector<float> set_test_patern_y =  { 97.1795f, 96.0256f, 94.4872f, 91.4103f, 88.3333f, 84.8718f, 79.8718f,
                                         77.5641f, 74.4872f, 71.4103f, 66.4103f, 61.7949f, 57.1795f, 52.9487f, 51.0256f,
            51.0256f, 51.0256f, 51.4103f, 51.4103f, 52.9487f, 54.1026f, 55.2564f, 55.641f, 56.0256f, 57.9487f, 62.1795f, 66.4103f, 69.1026f, 55.2564f, 49.8718f,
            46.0256f, 38.3333f, 42.1795f, 44.1026f, 36.4103f, 32.5641f, 31.4103f, 30.2564f, 32.1795f, 36.7949f, 41.4103f, 45.641f, 49.1026f, 36.0256f, 32.1795f,
            29.1026f, 26.7949f, 25.2564f, 25.2564f, 25.641f, 28.718f, 31.4103f, 34.8718f,
            37.5641f, 40.641f, 42.1795f, 44.4872f, 46.0256f, 46.7949f, 47.9487f, 53.718f,
            60.641f, 64.4872f, 69.4872f, 79.8718f, 84.1026f, 85.2564f, 85.2564f,
            86.0256f, 86.0256f, 82.9487f, 80.641f, 78.718f, 78.718f, 77.5641f, 59.8718f,
            62.1795f, 62.5641f, 99.4872f, 99.1026f, 97.5641f, 94.1026f, 91.0256f, 86.39423f,
            83.3333f, 79.1026f, 75.2564f, 71.4103f, 66.7949f, 60.2564f, 55.2564f, 51.4103f, 47.5641f, 46.0256f, 42.5641f, 39.8718f, 36.7949f, 33.718f, 40.641f,
            38.3333f, 33.718f, 29.1026f, 25.2564f, 24.1026f, 22.9487f, 22.9487f,
            22.1795f, 20.2564f, 19.1026f, 19.1026f, 18.3333f, 18.3333f, 18.3333f, 17.5641f,
            16.0256f, 13.718f, 14.8718f, 14.8718f, 14.8718f, 14.1026f, 12.5641f, 11.0256f, 9.8718f, 6.0256f, 9.4872f, 10.2564f, 10.2564f, 10.641f, 10.641f,
            10.641f, 10.641f, 10.641f, 10.641f, 8.718f, 5.2564f, 2.9487f, 25.7692f,
            25.3846f, 41.5385f, 95.7692f, 95.0f, 92.6923f };

   // REQUIRE((test_patern_x) == (set_test_patern_x));

    if(test_patern_x.size() == set_test_patern_x.size() && test_patern_y.size() == set_test_patern_y.size()){

        for(int i=0;i<test_patern_x.size();i++){
            REQUIRE((int)(test_patern_x[i]) == (int)(set_test_patern_x[i]));
        }
        for(int i=0;i<test_patern_y.size();i++){
            REQUIRE((int)(test_patern_y[i]) == (int)(set_test_patern_y[i]));
        }


    }else{
        REQUIRE(test_patern_x.size() == set_test_patern_x.size());
        REQUIRE(test_patern_y.size() == set_test_patern_y.size());
    }





}